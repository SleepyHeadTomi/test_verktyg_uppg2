{
  "stats": {
    "suites": 6,
    "tests": 17,
    "passes": 17,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-06T10:08:08.920Z",
    "end": "2024-06-06T10:08:08.951Z",
    "duration": 31,
    "testsRegistered": 17,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d22b8557-7bb4-4352-a695-491c1c45bb99",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce6d37af-7120-47e9-8f19-3562c40fed16",
          "title": "Unit test on the function getAllProducts",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all products from DB",
              "fullTitle": "Unit test on the function getAllProducts should return all products from DB",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = [\n  { id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" },\n  { id: 2, name: \"Product 2\", description: \"a product\", price: 25, quantity: 25, category: \"something\" },\n];\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"\" } };\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis(),\n};\nawait getAllProducts(req, res);\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "7c01acdf-d8b9-4140-8d56-33f0ca0dbc8f",
              "parentUUID": "ce6d37af-7120-47e9-8f19-3562c40fed16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status response of 200 when sending a query parameter",
              "fullTitle": "Unit test on the function getAllProducts should return a status response of 200 when sending a query parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = \n  { id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"Product 1\"}};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n};\n  \nawait getAllProducts(req, res);\n\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "9f0c99de-2560-4c36-a292-00f5edca8eca",
              "parentUUID": "ce6d37af-7120-47e9-8f19-3562c40fed16",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status response of 404 when sending a bad query",
              "fullTitle": "Unit test on the function getAllProducts should return a status response of 404 when sending a bad query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = [ ];\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"Bad Product\"}};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n};\nawait getAllProducts(req, res);\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "4d616288-76b8-4109-8e2f-92d3c44287f2",
              "parentUUID": "ce6d37af-7120-47e9-8f19-3562c40fed16",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7c01acdf-d8b9-4140-8d56-33f0ca0dbc8f",
            "9f0c99de-2560-4c36-a292-00f5edca8eca",
            "4d616288-76b8-4109-8e2f-92d3c44287f2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2c4a66a4-575a-4e31-9472-43d27e1ec97f",
          "title": "Unit test for the function getProductById",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function getProductById should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { params: { id: \"Invalid ID\" }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "68ebed04-3bc8-4553-a3ad-2ebd118d75bd",
              "parentUUID": "2c4a66a4-575a-4e31-9472-43d27e1ec97f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a valid ID",
              "fullTitle": "Unit test for the function getProductById should return status 200 when sending a valid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"getProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\nstub.restore();",
              "err": {},
              "uuid": "6131e94f-ef66-46bb-958e-cdf646ad7c32",
              "parentUUID": "2c4a66a4-575a-4e31-9472-43d27e1ec97f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 when sending a invalid ID",
              "fullTitle": "Unit test for the function getProductById should return status 404 when sending a invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = [ ]\nconst stub = sinon.stub(db, \"getProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 100 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\nstub.restore();",
              "err": {},
              "uuid": "dbdbeacc-0bbb-4bf9-ac96-fe515dfed92d",
              "parentUUID": "2c4a66a4-575a-4e31-9472-43d27e1ec97f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "68ebed04-3bc8-4553-a3ad-2ebd118d75bd",
            "6131e94f-ef66-46bb-958e-cdf646ad7c32",
            "dbdbeacc-0bbb-4bf9-ac96-fe515dfed92d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2ca3c02a-685d-4622-af3e-fcc03b78f7af",
          "title": "Unit test for the function updateProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function updateProduct should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  params: { id: \"Invalid param\" },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "7922a5aa-8be3-4b13-b27c-ce5591f094f8",
              "parentUUID": "2ca3c02a-685d-4622-af3e-fcc03b78f7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a valid ID",
              "fullTitle": "Unit test for the function updateProduct should return status 200 when sending a valid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"updateProdInDB\").resolves(mockProducts);\nconst req = { \n  params: { id: 1 },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\nstub.restore();",
              "err": {},
              "uuid": "7d139170-8663-495b-a960-731bc2ff4a69",
              "parentUUID": "2ca3c02a-685d-4622-af3e-fcc03b78f7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 when sendeing a invalid ID",
              "fullTitle": "Unit test for the function updateProduct should return status 404 when sendeing a invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = [ ]\nconst stub = sinon.stub(db, \"updateProdInDB\").resolves(mockProducts);\nconst req = { \n  params: { id: 100 },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\nstub.restore();",
              "err": {},
              "uuid": "034ad9a0-d765-40f7-85f5-5c58a97b747b",
              "parentUUID": "2ca3c02a-685d-4622-af3e-fcc03b78f7af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7922a5aa-8be3-4b13-b27c-ce5591f094f8",
            "7d139170-8663-495b-a960-731bc2ff4a69",
            "034ad9a0-d765-40f7-85f5-5c58a97b747b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b4f73c02-c21b-4036-a929-9d4588a4e198",
          "title": "Unit test for the function addProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid body input",
              "fullTitle": "Unit test for the function addProduct should return status 400 Bad Request when sending a invalid body input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  body: { name: undefined, description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "a4c44f26-26d0-4844-ab24-0fc0d39da0f0",
              "parentUUID": "b4f73c02-c21b-4036-a929-9d4588a4e198",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a correct declaired body",
              "fullTitle": "Unit test for the function addProduct should return status 200 when sending a correct declaired body",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"addProductToDB\").resolves(mockProducts);\nconst req = { \n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledWith(201));\nassert(res.json.calledWith({ message: \"Product added successfully\" }));\nstub.restore();",
              "err": {},
              "uuid": "d5c6b509-f5ca-41e4-8cae-d0966b4fda4d",
              "parentUUID": "b4f73c02-c21b-4036-a929-9d4588a4e198",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when sendeing a invalid ID",
              "fullTitle": "Unit test for the function addProduct should return status 500 Internal server error when sendeing a invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = [ ]\nconst stub = sinon.stub(db, \"addProductToDB\").resolves(mockProducts);\nconst req = { \n  body: { name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "f68a9701-efb0-4bce-a5ec-5e1730d35b4b",
              "parentUUID": "b4f73c02-c21b-4036-a929-9d4588a4e198",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4c44f26-26d0-4844-ab24-0fc0d39da0f0",
            "d5c6b509-f5ca-41e4-8cae-d0966b4fda4d",
            "f68a9701-efb0-4bce-a5ec-5e1730d35b4b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e1a530f-846f-4c5e-a054-eb934e9e9d48",
          "title": "Unit test for the function deleteAllProducts",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200 when deleting all products",
              "fullTitle": "Unit test for the function deleteAllProducts should return status 200 when deleting all products",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockResponse = [{ affectedRows: 1 }];\nconst stub = sinon.stub(db, \"deleteAllFromDB\").resolves(mockResponse);\nconst req = {};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteAllProducts(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Products Deleted\"}));\nstub.restore();",
              "err": {},
              "uuid": "f51e1298-1c5f-4616-a903-0800da74241f",
              "parentUUID": "9e1a530f-846f-4c5e-a054-eb934e9e9d48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when the deletion fails",
              "fullTitle": "Unit test for the function deleteAllProducts should return status 500 Internal server error when the deletion fails",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = []\nconst stub = sinon.stub(db, \"deleteAllFromDB\").resolves(mockProducts);\nconst req = {};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteAllProducts(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "584b088c-18fb-4db0-9048-95cade187180",
              "parentUUID": "9e1a530f-846f-4c5e-a054-eb934e9e9d48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f51e1298-1c5f-4616-a903-0800da74241f",
            "584b088c-18fb-4db0-9048-95cade187180"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "74f7af28-a795-4eb2-8316-adb94f976588",
          "title": "Unit test for the function deleteProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function deleteProduct should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  params: { id: \"Invalid param\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "7bd39fce-9487-427b-91e8-069499cc9b65",
              "parentUUID": "74f7af28-a795-4eb2-8316-adb94f976588",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when deleting specified product",
              "fullTitle": "Unit test for the function deleteProduct should return status 200 when deleting specified product",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockResponse = [{ affectedRows: 1 }];\nconst stub = sinon.stub(db, \"deleteProdFromDB\").resolves(mockResponse);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Product Deleted\"}));\nstub.restore();",
              "err": {},
              "uuid": "3a776890-4f91-43b6-9973-1828af3b75b5",
              "parentUUID": "74f7af28-a795-4eb2-8316-adb94f976588",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when the deletion fails",
              "fullTitle": "Unit test for the function deleteProduct should return status 500 Internal server error when the deletion fails",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = []\nconst stub = sinon.stub(db, \"deleteProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "f189a8bb-08dd-4ea9-8ab6-c7b473ccd7ee",
              "parentUUID": "74f7af28-a795-4eb2-8316-adb94f976588",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bd39fce-9487-427b-91e8-069499cc9b65",
            "3a776890-4f91-43b6-9973-1828af3b75b5",
            "f189a8bb-08dd-4ea9-8ab6-c7b473ccd7ee"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}