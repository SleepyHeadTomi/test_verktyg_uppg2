{
  "stats": {
    "suites": 7,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-07T13:41:04.126Z",
    "end": "2024-06-07T13:41:04.653Z",
    "duration": 527,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "de3e36d8-1d1c-40b3-991b-909d485eecff",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bf0a6be7-0746-4cd9-bace-829467f33b69",
          "title": "Routes integration tests",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\integration\\int.test.js",
          "file": "\\test\\integration\\int.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Routes integration tests\"",
              "fullTitle": "Routes integration tests \"before each\" hook in \"Routes integration tests\"",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    connection = await mysql.createConnection({\n        user: process.env.USER,\n        password: process.env.PASSWORD,\n        host: process.env.HOST,\n        database: process.env.DATABASE\n    })\n    \n    console.log(\"Connected to database.\");\n} catch (error) {\n    console.log(\"Something went wrong when connecting to the database\", error);\n}\nawait connection.query(\"DROP TABLE IF EXISTS products\");\nawait connection.query(`CREATE TABLE products (\n    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n    name varchar(255) NOT NULL,\n    description varchar(255) NOT NULL,\n    price INT NOT NULL,\n    quantity INT NOT NULL,\n    category varchar(255) NOT NULL\n)`);\nawait connection.query(`INSERT INTO products (name, description, price, quantity, category) \n    VALUES (\"sausage\", \"a snack\", 25, 52, \"food item\")`);",
              "err": {},
              "uuid": "ed0bc343-a099-488f-9a6e-303c98464e74",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Routes integration tests\"",
              "fullTitle": "Routes integration tests \"after each\" hook in \"Routes integration tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await connection.query(\"DELETE FROM products\");\nawait connection.end();",
              "err": {},
              "uuid": "114377ad-6eb4-4708-9d7b-985cb5c0e9c7",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return status 200 and all products",
              "fullTitle": "Routes integration tests should return status 200 and all products",
              "timedOut": false,
              "duration": 20,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products\");\n  \nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "9803704b-c3ab-41e0-9a83-ed494f725930",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and the specified product",
              "fullTitle": "Routes integration tests should return status 200 and the specified product",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=sausage\");\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "009a8729-1a1d-45fc-92df-034216718963",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending an invalid query",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending an invalid query",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=pizza\");\n\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "920d3fde-cfe5-4453-8a00-6e381798b358",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and a product containing specified query",
              "fullTitle": "Routes integration tests should return status 200 and a product containing specified query",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=au\");\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "cbf8d251-0ed8-4361-9f2d-cdc2f44e5ac5",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and the specified product",
              "fullTitle": "Routes integration tests should return status 200 and the specified product",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await request(server).get(`/api/products/${id}`);\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "d471ef82-49ba-46b5-8f48-5040f343234d",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 100;\nconst response = await request(server).get(`/api/products/${id}`);\n\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "c53c4548-5bfb-4835-a2cb-83851f72b9ce",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 200 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 19,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .put(`/api/products/${id}`)\n    .send(newUserInfo);\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Changes saved\")",
              "err": {},
              "uuid": "dc3739f2-29f2-4cc4-8761-b149d2999f2f",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 2;\nconst newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .put(`/api/products/${id}`)\n    .send(newUserInfo);\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "556bc37d-352d-48b5-8b4f-97774a8484a8",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 201 Product added successfully",
              "fullTitle": "Routes integration tests should return status 201 Product added successfully",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .post(\"/api/products\")\n    .send(newUserInfo);\nassert.strictEqual(response.status, 201);\nassert.strictEqual(response.body.message, \"Product added successfully\" );",
              "err": {},
              "uuid": "7b056dfe-97bd-4745-b5b8-37cbea80883d",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Products Deleted",
              "fullTitle": "Routes integration tests should return status 200 Products Deleted",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server)\n    .delete(\"/api/products\")\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Products Deleted\" );",
              "err": {},
              "uuid": "d78c35d1-432e-4e16-bc66-f9ae9d96ba0e",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Product Deleted",
              "fullTitle": "Routes integration tests should return status 200 Product Deleted",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await request(server)\n    .delete(`/api/products/${id}`)\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Product Deleted\" );",
              "err": {},
              "uuid": "814e8b89-f10f-4639-acd0-98d991e4bd50",
              "parentUUID": "bf0a6be7-0746-4cd9-bace-829467f33b69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9803704b-c3ab-41e0-9a83-ed494f725930",
            "009a8729-1a1d-45fc-92df-034216718963",
            "920d3fde-cfe5-4453-8a00-6e381798b358",
            "cbf8d251-0ed8-4361-9f2d-cdc2f44e5ac5",
            "d471ef82-49ba-46b5-8f48-5040f343234d",
            "c53c4548-5bfb-4835-a2cb-83851f72b9ce",
            "dc3739f2-29f2-4cc4-8761-b149d2999f2f",
            "556bc37d-352d-48b5-8b4f-97774a8484a8",
            "7b056dfe-97bd-4745-b5b8-37cbea80883d",
            "d78c35d1-432e-4e16-bc66-f9ae9d96ba0e",
            "814e8b89-f10f-4639-acd0-98d991e4bd50"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 93,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "79e0ff7e-0d40-4f7d-b26c-f7fc0e452ce4",
          "title": "Unit test on the function getAllProducts",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all products from DB",
              "fullTitle": "Unit test on the function getAllProducts should return all products from DB",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = [\n  { id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" },\n  { id: 2, name: \"Product 2\", description: \"a product\", price: 25, quantity: 25, category: \"something\" },\n];\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"\" } };\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis(),\n};\nawait getAllProducts(req, res);\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "9765369c-c49a-495c-99ff-a96aad81037f",
              "parentUUID": "79e0ff7e-0d40-4f7d-b26c-f7fc0e452ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status response of 200 when sending a query parameter",
              "fullTitle": "Unit test on the function getAllProducts should return a status response of 200 when sending a query parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = \n  { id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"Product 1\"}};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n};\n  \nawait getAllProducts(req, res);\n\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "eb9433f6-f69c-4dad-a1a9-a3be324c50ad",
              "parentUUID": "79e0ff7e-0d40-4f7d-b26c-f7fc0e452ce4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status response of 404 when sending a bad query",
              "fullTitle": "Unit test on the function getAllProducts should return a status response of 404 when sending a bad query",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = [ ];\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"Bad Product\"}};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n};\nawait getAllProducts(req, res);\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "77c4e814-2846-4371-acf1-e874b8ee1696",
              "parentUUID": "79e0ff7e-0d40-4f7d-b26c-f7fc0e452ce4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9765369c-c49a-495c-99ff-a96aad81037f",
            "eb9433f6-f69c-4dad-a1a9-a3be324c50ad",
            "77c4e814-2846-4371-acf1-e874b8ee1696"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9702cc24-5753-47b6-b2ad-57fbf6ef4e66",
          "title": "Unit test for the function getProductById",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function getProductById should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { params: { id: \"Invalid ID\" }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "4d83418b-0222-4afc-b97d-7198412146ca",
              "parentUUID": "9702cc24-5753-47b6-b2ad-57fbf6ef4e66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a valid ID",
              "fullTitle": "Unit test for the function getProductById should return status 200 when sending a valid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"getProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\nstub.restore();",
              "err": {},
              "uuid": "ccc122fd-bdc4-4bbc-8dfc-5e74331b2d87",
              "parentUUID": "9702cc24-5753-47b6-b2ad-57fbf6ef4e66",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 when sending a invalid ID",
              "fullTitle": "Unit test for the function getProductById should return status 404 when sending a invalid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = [ ]\nconst stub = sinon.stub(db, \"getProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 100 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\nstub.restore();",
              "err": {},
              "uuid": "821c0cc1-91d2-4df2-8dfe-c57d65ca9c69",
              "parentUUID": "9702cc24-5753-47b6-b2ad-57fbf6ef4e66",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d83418b-0222-4afc-b97d-7198412146ca",
            "ccc122fd-bdc4-4bbc-8dfc-5e74331b2d87",
            "821c0cc1-91d2-4df2-8dfe-c57d65ca9c69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a1486c20-6f8a-4394-b166-fdd5e623651a",
          "title": "Unit test for the function updateProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function updateProduct should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  params: { id: \"Invalid param\" },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "e6a3a396-9bb6-4b6a-bb64-a77132c85eb2",
              "parentUUID": "a1486c20-6f8a-4394-b166-fdd5e623651a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a valid ID",
              "fullTitle": "Unit test for the function updateProduct should return status 200 when sending a valid ID",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"updateProdInDB\").resolves(mockProducts);\nconst req = { \n  params: { id: 1 },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Changes saved\"}));\nstub.restore();",
              "err": {},
              "uuid": "892ba577-6198-473a-9633-e9907fdbbeef",
              "parentUUID": "a1486c20-6f8a-4394-b166-fdd5e623651a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 when sending a invalid ID",
              "fullTitle": "Unit test for the function updateProduct should return status 404 when sending a invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = { affectedRows: 0 }\nconst stub = sinon.stub(db, \"updateProdInDB\").resolves(mockProducts);\nconst req = { \n  params: { id: 100 },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\nstub.restore();",
              "err": {},
              "uuid": "117a7896-7a6c-4cca-a08c-921e3146da03",
              "parentUUID": "a1486c20-6f8a-4394-b166-fdd5e623651a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e6a3a396-9bb6-4b6a-bb64-a77132c85eb2",
            "892ba577-6198-473a-9633-e9907fdbbeef",
            "117a7896-7a6c-4cca-a08c-921e3146da03"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "553f3676-bc7a-4865-8315-9f7ae4a6f09e",
          "title": "Unit test for the function addProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid body input",
              "fullTitle": "Unit test for the function addProduct should return status 400 Bad Request when sending a invalid body input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  body: { name: undefined, description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "5dc66ad7-6307-439b-ba9f-10fc3c51af96",
              "parentUUID": "553f3676-bc7a-4865-8315-9f7ae4a6f09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a correct declared body",
              "fullTitle": "Unit test for the function addProduct should return status 200 when sending a correct declared body",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"addProductToDB\").resolves(mockProducts);\nconst req = { \n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledWith(201));\nassert(res.json.calledWith({ message: \"Product added successfully\" }));\nstub.restore();",
              "err": {},
              "uuid": "c11eec99-a081-4011-9306-788ef44de32d",
              "parentUUID": "553f3676-bc7a-4865-8315-9f7ae4a6f09e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error",
              "fullTitle": "Unit test for the function addProduct should return status 500 Internal server error",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = { affectedRows: 0 }\nconst stub = sinon.stub(db, \"addProductToDB\").resolves(mockProducts);\nconst req = { \n  body: { name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "525d3a25-5de4-4a52-ba68-3febcf44c947",
              "parentUUID": "553f3676-bc7a-4865-8315-9f7ae4a6f09e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5dc66ad7-6307-439b-ba9f-10fc3c51af96",
            "c11eec99-a081-4011-9306-788ef44de32d",
            "525d3a25-5de4-4a52-ba68-3febcf44c947"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "01ee19e0-bd58-4cda-9d6c-3a637c9d9ef9",
          "title": "Unit test for the function deleteAllProducts",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200 when deleting all products",
              "fullTitle": "Unit test for the function deleteAllProducts should return status 200 when deleting all products",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockResponse = [{ affectedRows: 1 }];\nconst stub = sinon.stub(db, \"deleteAllFromDB\").resolves(mockResponse);\nconst req = {};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteAllProducts(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Products Deleted\"}));\nstub.restore();",
              "err": {},
              "uuid": "6378c6ec-4f81-4297-a390-3e8bbd68b55d",
              "parentUUID": "01ee19e0-bd58-4cda-9d6c-3a637c9d9ef9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when the deletion fails",
              "fullTitle": "Unit test for the function deleteAllProducts should return status 500 Internal server error when the deletion fails",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = []\nconst stub = sinon.stub(db, \"deleteAllFromDB\").resolves(mockProducts);\nconst req = {};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteAllProducts(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "28b5a943-cb43-463c-b3ab-dd9eed9acd52",
              "parentUUID": "01ee19e0-bd58-4cda-9d6c-3a637c9d9ef9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6378c6ec-4f81-4297-a390-3e8bbd68b55d",
            "28b5a943-cb43-463c-b3ab-dd9eed9acd52"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "207420bf-9315-4aef-a4e1-d72d52420bba",
          "title": "Unit test for the function deleteProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function deleteProduct should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  params: { id: \"Invalid param\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "28aae8ee-a533-40ab-993f-c8edfb8d35b4",
              "parentUUID": "207420bf-9315-4aef-a4e1-d72d52420bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when deleting specified product",
              "fullTitle": "Unit test for the function deleteProduct should return status 200 when deleting specified product",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockResponse = [{ affectedRows: 1 }];\nconst stub = sinon.stub(db, \"deleteProdFromDB\").resolves(mockResponse);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Product Deleted\"}));\nstub.restore();",
              "err": {},
              "uuid": "9f5ae3db-ad1c-4efd-a3cf-ec103392d39d",
              "parentUUID": "207420bf-9315-4aef-a4e1-d72d52420bba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when the deletion fails",
              "fullTitle": "Unit test for the function deleteProduct should return status 500 Internal server error when the deletion fails",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = []\nconst stub = sinon.stub(db, \"deleteProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "49e749c9-9a09-497a-8810-05ca402f3419",
              "parentUUID": "207420bf-9315-4aef-a4e1-d72d52420bba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "28aae8ee-a533-40ab-993f-c8edfb8d35b4",
            "9f5ae3db-ad1c-4efd-a3cf-ec103392d39d",
            "49e749c9-9a09-497a-8810-05ca402f3419"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}