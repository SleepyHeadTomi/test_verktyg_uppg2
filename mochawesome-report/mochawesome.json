{
  "stats": {
    "suites": 1,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-07T11:42:10.352Z",
    "end": "2024-06-07T11:42:10.897Z",
    "duration": 545,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2a62a0af-2d84-481b-93cb-3d5a4a582e5b",
      "title": "",
      "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\integration\\int.test.js",
      "file": "\\test\\integration\\int.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b3879264-71be-4078-b24e-0f7e7fbef974",
          "title": "Routes integration tests",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\integration\\int.test.js",
          "file": "\\test\\integration\\int.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Routes integration tests\"",
              "fullTitle": "Routes integration tests \"before each\" hook in \"Routes integration tests\"",
              "timedOut": false,
              "duration": 31,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    connection = await mysql.createConnection({\n        user: process.env.USER,\n        password: process.env.PASSWORD,\n        host: process.env.HOST,\n        database: process.env.DATABASE\n    })\n    \n    console.log(\"Connected to database.\");\n} catch (error) {\n    console.log(\"Something went wrong when connecting to the database\", error);\n}\nawait connection.query(\"DROP TABLE IF EXISTS products\");\nawait connection.query(`CREATE TABLE products (\n    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n    name varchar(255) NOT NULL,\n    description varchar(255) NOT NULL,\n    price INT NOT NULL,\n    quantity INT NOT NULL,\n    category varchar(255) NOT NULL\n)`);\nawait connection.query(`INSERT INTO products (name, description, price, quantity, category) \n    VALUES (\"sausage\", \"a snack\", 25, 52, \"food item\")`);",
              "err": {},
              "uuid": "63d8fff2-7b06-4a4a-9a6d-f9f24ac2f630",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Routes integration tests\"",
              "fullTitle": "Routes integration tests \"after each\" hook in \"Routes integration tests\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await connection.query(\"DELETE FROM products\");\nawait connection.end();",
              "err": {},
              "uuid": "79b66944-46ad-4e9c-addc-d9d19581dd58",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return status 200 and all products",
              "fullTitle": "Routes integration tests should return status 200 and all products",
              "timedOut": false,
              "duration": 24,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products\");\n  \nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "8c0a5061-cda3-4b79-9906-f62ecd258e29",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and the specified product",
              "fullTitle": "Routes integration tests should return status 200 and the specified product",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=sausage\");\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "e7a0bd43-19d5-4341-a759-54f3fe55db08",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending an invalid query",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending an invalid query",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=pizza\");\n\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "4fb20f0c-6552-4e97-b42a-87bbaa3c255d",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and a product containing specified query",
              "fullTitle": "Routes integration tests should return status 200 and a product containing specified query",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=au\");\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "a93dc1b7-de6f-4e4d-adbc-28b77e58862c",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and the specified product",
              "fullTitle": "Routes integration tests should return status 200 and the specified product",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await request(server).get(`/api/products/${id}`);\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "3816fb64-92b2-4704-824d-94c2ebaa9ae1",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 100;\nconst response = await request(server).get(`/api/products/${id}`);\n\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "39f139f2-4adf-4bc3-b2a4-ef4961207155",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 200 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 22,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .put(`/api/products/${id}`)\n    .send(newUserInfo);\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Changes saved\")",
              "err": {},
              "uuid": "88cf05b7-28a8-4601-b192-b508bcd84856",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 2;\nconst newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .put(`/api/products/${id}`)\n    .send(newUserInfo);\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "ee34794a-a439-411b-a686-2160ac0838fb",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 201 Product added successfully",
              "fullTitle": "Routes integration tests should return status 201 Product added successfully",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .post(\"/api/products\")\n    .send(newUserInfo);\nassert.strictEqual(response.status, 201);\nassert.strictEqual(response.body.message, \"Product added successfully\" );",
              "err": {},
              "uuid": "e082fefe-7f05-453c-9fb6-66b2b58f4431",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Products Deleted",
              "fullTitle": "Routes integration tests should return status 200 Products Deleted",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server)\n    .delete(\"/api/products\")\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Products Deleted\" );",
              "err": {},
              "uuid": "b34d1e27-4199-4c20-88df-66c3c8e64ecf",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Product Deleted",
              "fullTitle": "Routes integration tests should return status 200 Product Deleted",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await request(server)\n    .delete(`/api/products/${id}`)\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Product Deleted\" );",
              "err": {},
              "uuid": "78be123c-89ab-4b75-9918-da5a183eadd4",
              "parentUUID": "b3879264-71be-4078-b24e-0f7e7fbef974",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8c0a5061-cda3-4b79-9906-f62ecd258e29",
            "e7a0bd43-19d5-4341-a759-54f3fe55db08",
            "4fb20f0c-6552-4e97-b42a-87bbaa3c255d",
            "a93dc1b7-de6f-4e4d-adbc-28b77e58862c",
            "3816fb64-92b2-4704-824d-94c2ebaa9ae1",
            "39f139f2-4adf-4bc3-b2a4-ef4961207155",
            "88cf05b7-28a8-4601-b192-b508bcd84856",
            "ee34794a-a439-411b-a686-2160ac0838fb",
            "e082fefe-7f05-453c-9fb6-66b2b58f4431",
            "b34d1e27-4199-4c20-88df-66c3c8e64ecf",
            "78be123c-89ab-4b75-9918-da5a183eadd4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}