{
  "stats": {
    "suites": 7,
    "tests": 28,
    "passes": 28,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-10T09:41:57.866Z",
    "end": "2024-06-10T09:41:58.617Z",
    "duration": 751,
    "testsRegistered": 28,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "49459e32-7d6e-446a-88bd-a183339bbe6f",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
          "title": "Routes integration tests",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\integration\\int.test.js",
          "file": "\\test\\integration\\int.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Routes integration tests\"",
              "fullTitle": "Routes integration tests \"before each\" hook in \"Routes integration tests\"",
              "timedOut": false,
              "duration": 40,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    connection = await mysql.createConnection({\n        user: process.env.USER,\n        password: process.env.PASSWORD,\n        host: process.env.HOST,\n        database: process.env.DATABASE\n    })\n    \n    console.log(\"Connected to database.\");\n} catch (error) {\n    console.log(\"Something went wrong when connecting to the database\", error);\n}\nawait connection.query(\"DROP TABLE IF EXISTS products\");\nawait connection.query(`CREATE TABLE products (\n    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,\n    name varchar(255) NOT NULL,\n    description varchar(255) NOT NULL,\n    price INT NOT NULL,\n    quantity INT NOT NULL,\n    category varchar(255) NOT NULL\n)`);\nawait connection.query(`INSERT INTO products (name, description, price, quantity, category) \n    VALUES (\"sausage\", \"a snack\", 25, 52, \"food item\")`);",
              "err": {},
              "uuid": "7eb647f9-cfee-4605-adea-1299ac49b53e",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Routes integration tests\"",
              "fullTitle": "Routes integration tests \"after each\" hook in \"Routes integration tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await connection.query(\"DELETE FROM products\");\nawait connection.end();",
              "err": {},
              "uuid": "4b446891-0293-4793-9a7d-a697bfe691a6",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return status 200 and all products",
              "fullTitle": "Routes integration tests should return status 200 and all products",
              "timedOut": false,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products\");\n  \nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "61baa9b6-91d1-4cc3-94a7-7893f05657bd",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and the specified product",
              "fullTitle": "Routes integration tests should return status 200 and the specified product",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=sausage\");\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "6c8306f2-c799-4be0-8eb2-3cc2f13abcb4",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending an invalid query",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending an invalid query",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=pizza\");\n\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "8d5bcdab-660f-40c8-b8f1-c3a3b23debce",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and a product containing specified query",
              "fullTitle": "Routes integration tests should return status 200 and a product containing specified query",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server).get(\"/api/products?name=au\");\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "13f322a7-7262-407c-a485-3505bbac2ce7",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 and the specified product",
              "fullTitle": "Routes integration tests should return status 200 and the specified product",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await request(server).get(`/api/products/${id}`);\n\nassert.strictEqual(response.status, 200);\nassert(Array.isArray(response.body));\nassert.strictEqual(response.body.length, 1);\nassert.strictEqual(response.body[0].name, \"sausage\");",
              "err": {},
              "uuid": "6e62ae58-3d8c-41de-9c68-6e827edff2cd",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 100;\nconst response = await request(server).get(`/api/products/${id}`);\n\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "812a0cf9-b487-461d-bb19-0082b7098524",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 200 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .put(`/api/products/${id}`)\n    .send(newUserInfo);\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Changes saved\")",
              "err": {},
              "uuid": "44c8f222-360b-4e3c-9401-6223bc1a83d4",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 Not Found when sending invalid ID",
              "fullTitle": "Routes integration tests should return status 404 Not Found when sending invalid ID",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 2;\nconst newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .put(`/api/products/${id}`)\n    .send(newUserInfo);\nassert.strictEqual(response.status, 404);\nassert.strictEqual(response.body.message, \"Not Found\" );",
              "err": {},
              "uuid": "5cd0f3ad-10c8-4901-9c87-428a33edbe88",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 201 Product added successfully",
              "fullTitle": "Routes integration tests should return status 201 Product added successfully",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUserInfo = {\n    name: \"Hamburger\",\n    description: \"a meal\",\n    price: 75,\n    quantity: 65,\n    category: \"food item\"\n}\nconst response = await request(server)\n    .post(\"/api/products\")\n    .send(newUserInfo);\nassert.strictEqual(response.status, 201);\nassert.strictEqual(response.body.message, \"Product added successfully\" );",
              "err": {},
              "uuid": "1dcc4286-77e8-4098-848a-8cfce189eefc",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Products Deleted",
              "fullTitle": "Routes integration tests should return status 200 Products Deleted",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(server)\n    .delete(\"/api/products\")\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Products Deleted\" );",
              "err": {},
              "uuid": "aec8afba-637c-4a05-a348-f38ef26d15b1",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 Product Deleted",
              "fullTitle": "Routes integration tests should return status 200 Product Deleted",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const id = 1;\nconst response = await request(server)\n    .delete(`/api/products/${id}`)\nassert.strictEqual(response.status, 200);\nassert.strictEqual(response.body.message, \"Product Deleted\" );",
              "err": {},
              "uuid": "86005796-b455-437c-875a-11411350c5fb",
              "parentUUID": "928ae964-a7d3-4091-a4f9-cc4c99f26b8e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "61baa9b6-91d1-4cc3-94a7-7893f05657bd",
            "6c8306f2-c799-4be0-8eb2-3cc2f13abcb4",
            "8d5bcdab-660f-40c8-b8f1-c3a3b23debce",
            "13f322a7-7262-407c-a485-3505bbac2ce7",
            "6e62ae58-3d8c-41de-9c68-6e827edff2cd",
            "812a0cf9-b487-461d-bb19-0082b7098524",
            "44c8f222-360b-4e3c-9401-6223bc1a83d4",
            "5cd0f3ad-10c8-4901-9c87-428a33edbe88",
            "1dcc4286-77e8-4098-848a-8cfce189eefc",
            "aec8afba-637c-4a05-a348-f38ef26d15b1",
            "86005796-b455-437c-875a-11411350c5fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "734b602a-f870-481d-9f72-fb7654e1de10",
          "title": "Unit test on the function getAllProducts",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return all products from DB",
              "fullTitle": "Unit test on the function getAllProducts should return all products from DB",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = [\n  { id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" },\n  { id: 2, name: \"Product 2\", description: \"a product\", price: 25, quantity: 25, category: \"something\" },\n];\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"\" } };\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis(),\n};\nawait getAllProducts(req, res);\n\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "6ffb5ea7-0d93-4ac4-9b1b-6d5ad98a0fce",
              "parentUUID": "734b602a-f870-481d-9f72-fb7654e1de10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status response of 200 when sending a query parameter",
              "fullTitle": "Unit test on the function getAllProducts should return a status response of 200 when sending a query parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = \n  { id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"Product 1\"}};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n};\n  \nawait getAllProducts(req, res);\n\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "7d01e070-2c1b-4f20-9774-333f3ffcd50f",
              "parentUUID": "734b602a-f870-481d-9f72-fb7654e1de10",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a status response of 404 when sending a bad query",
              "fullTitle": "Unit test on the function getAllProducts should return a status response of 404 when sending a bad query",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Simulates the database\nconst mockProducts = [ ];\n// Creates a stub function for getProductsFromDB\nconst stub = sinon.stub(db, \"getProductsFromDB\").resolves(mockProducts);\n// Calls the function getAllproducts with apropriate request and response arguments\nconst req = { query: { name: \"Bad Product\"}};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n};\nawait getAllProducts(req, res);\n// Verfies that the corrects response is returned\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\n// Restores the mocked function\nstub.restore();",
              "err": {},
              "uuid": "bb9f33a5-8192-4e96-ae12-44b1bebe9982",
              "parentUUID": "734b602a-f870-481d-9f72-fb7654e1de10",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ffb5ea7-0d93-4ac4-9b1b-6d5ad98a0fce",
            "7d01e070-2c1b-4f20-9774-333f3ffcd50f",
            "bb9f33a5-8192-4e96-ae12-44b1bebe9982"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9101a6e1-33cc-47ec-a98f-05fda070f5c6",
          "title": "Unit test for the function getProductById",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function getProductById should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { params: { id: \"Invalid ID\" }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;\n/*\nconst { status, message } = await getProductById(\"Invalid ID\");\nassert(status, 400);\n*/",
              "err": {},
              "uuid": "9920cadc-9d09-4f5b-9b8b-2fb59d0a2071",
              "parentUUID": "9101a6e1-33cc-47ec-a98f-05fda070f5c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a valid ID",
              "fullTitle": "Unit test for the function getProductById should return status 200 when sending a valid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"getProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith(mockProducts));\nstub.restore();",
              "err": {},
              "uuid": "76ce5917-41c7-4a80-8d79-fd61aa788c97",
              "parentUUID": "9101a6e1-33cc-47ec-a98f-05fda070f5c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 when sending a invalid ID",
              "fullTitle": "Unit test for the function getProductById should return status 404 when sending a invalid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = [ ]\nconst stub = sinon.stub(db, \"getProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 100 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait getProductById(req, res);\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\nstub.restore();",
              "err": {},
              "uuid": "fef1866f-9880-4f12-bf4a-d92b7da6e817",
              "parentUUID": "9101a6e1-33cc-47ec-a98f-05fda070f5c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9920cadc-9d09-4f5b-9b8b-2fb59d0a2071",
            "76ce5917-41c7-4a80-8d79-fd61aa788c97",
            "fef1866f-9880-4f12-bf4a-d92b7da6e817"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "12476cdf-ce6f-49a0-ab93-2d8f4704a49b",
          "title": "Unit test for the function updateProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function updateProduct should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  params: { id: \"Invalid param\" },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "13faf809-9d2d-440d-bd9c-6a88c4e1dd87",
              "parentUUID": "12476cdf-ce6f-49a0-ab93-2d8f4704a49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a valid ID",
              "fullTitle": "Unit test for the function updateProduct should return status 200 when sending a valid ID",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"updateProdInDB\").resolves(mockProducts);\nconst req = { \n  params: { id: 1 },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Changes saved\"}));\nstub.restore();",
              "err": {},
              "uuid": "53c19263-8b92-4dda-bfa3-3b84db74fcd5",
              "parentUUID": "12476cdf-ce6f-49a0-ab93-2d8f4704a49b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 404 when sending a invalid ID",
              "fullTitle": "Unit test for the function updateProduct should return status 404 when sending a invalid ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = { affectedRows: 0 }\nconst stub = sinon.stub(db, \"updateProdInDB\").resolves(mockProducts);\nconst req = { \n  params: { id: 100 },\n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait updateProduct(req, res);\nassert(res.status.calledWith(404));\nassert(res.json.calledWith({ message: \"Not Found\"}));\nstub.restore();",
              "err": {},
              "uuid": "b20c79c2-a36b-4357-bc07-6f1e5aaf5db3",
              "parentUUID": "12476cdf-ce6f-49a0-ab93-2d8f4704a49b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "13faf809-9d2d-440d-bd9c-6a88c4e1dd87",
            "53c19263-8b92-4dda-bfa3-3b84db74fcd5",
            "b20c79c2-a36b-4357-bc07-6f1e5aaf5db3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "20349b20-6eae-4ca6-9625-6f5cd547354d",
          "title": "Unit test for the function addProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid body input",
              "fullTitle": "Unit test for the function addProduct should return status 400 Bad Request when sending a invalid body input",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  body: { name: undefined, description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "a69e7d69-22e7-4883-b42e-e53fc9deb5b6",
              "parentUUID": "20349b20-6eae-4ca6-9625-6f5cd547354d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when sending a correct declared body",
              "fullTitle": "Unit test for the function addProduct should return status 200 when sending a correct declared body",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = \n{ id: 1, name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" };\nconst stub = sinon.stub(db, \"addProductToDB\").resolves(mockProducts);\nconst req = { \n  body: { name: \"Product 100\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledWith(201));\nassert(res.json.calledWith({ message: \"Product added successfully\" }));\nstub.restore();",
              "err": {},
              "uuid": "3b74dddc-c5a2-455b-9117-15871eedc819",
              "parentUUID": "20349b20-6eae-4ca6-9625-6f5cd547354d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error",
              "fullTitle": "Unit test for the function addProduct should return status 500 Internal server error",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = { affectedRows: 0 }\nconst stub = sinon.stub(db, \"addProductToDB\").resolves(mockProducts);\nconst req = { \n  body: { name: \"Product 1\", description: \"a product\", price: 25, quantity: 25, category: \"something\" }\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait addProduct(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "fd11743c-4579-4b11-a3b0-b6b93f711890",
              "parentUUID": "20349b20-6eae-4ca6-9625-6f5cd547354d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a69e7d69-22e7-4883-b42e-e53fc9deb5b6",
            "3b74dddc-c5a2-455b-9117-15871eedc819",
            "fd11743c-4579-4b11-a3b0-b6b93f711890"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ecce615-64bd-4e04-b849-0fa24dddc32e",
          "title": "Unit test for the function deleteAllProducts",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200 when deleting all products",
              "fullTitle": "Unit test for the function deleteAllProducts should return status 200 when deleting all products",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockResponse = [{ affectedRows: 1 }];\nconst stub = sinon.stub(db, \"deleteAllFromDB\").resolves(mockResponse);\nconst req = {};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteAllProducts(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Products Deleted\"}));\nstub.restore();",
              "err": {},
              "uuid": "0c4c8163-5053-4869-ab34-ca916cf850cf",
              "parentUUID": "5ecce615-64bd-4e04-b849-0fa24dddc32e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when the deletion fails",
              "fullTitle": "Unit test for the function deleteAllProducts should return status 500 Internal server error when the deletion fails",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = []\nconst stub = sinon.stub(db, \"deleteAllFromDB\").resolves(mockProducts);\nconst req = {};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteAllProducts(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "41a06ce1-c706-4ddb-8a3d-3841d0dd149e",
              "parentUUID": "5ecce615-64bd-4e04-b849-0fa24dddc32e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0c4c8163-5053-4869-ab34-ca916cf850cf",
            "41a06ce1-c706-4ddb-8a3d-3841d0dd149e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "0c4e2acf-127e-4b41-ab4c-004d393ed060",
          "title": "Unit test for the function deleteProduct",
          "fullFile": "C:\\Users\\vucko\\OneDrive\\Skrivbord\\test_verktyg_uppgift2\\test\\unit\\unit.test.js",
          "file": "\\test\\unit\\unit.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 400 Bad Request when sending a invalid parameter",
              "fullTitle": "Unit test for the function deleteProduct should return status 400 Bad Request when sending a invalid parameter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const req = { \n  params: { id: \"Invalid param\" },\n};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledOnce);\nassert(res.status.calledWith(400));\nassert(res.json.calledOnce);\nassert(res.json.calledWith({ message: \"Bad Request\" }));;",
              "err": {},
              "uuid": "75b716e5-5116-4de1-858d-bbbd838ea48c",
              "parentUUID": "0c4e2acf-127e-4b41-ab4c-004d393ed060",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 200 when deleting specified product",
              "fullTitle": "Unit test for the function deleteProduct should return status 200 when deleting specified product",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockResponse = [{ affectedRows: 1 }];\nconst stub = sinon.stub(db, \"deleteProdFromDB\").resolves(mockResponse);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledWith(200));\nassert(res.json.calledWith({ message: \"Product Deleted\"}));\nstub.restore();",
              "err": {},
              "uuid": "602fe0a8-7577-4a9a-84cd-cdfedc1ff13e",
              "parentUUID": "0c4e2acf-127e-4b41-ab4c-004d393ed060",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return status 500 Internal server error when the deletion fails",
              "fullTitle": "Unit test for the function deleteProduct should return status 500 Internal server error when the deletion fails",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const mockProducts = []\nconst stub = sinon.stub(db, \"deleteProdFromDB\").resolves(mockProducts);\nconst req = { params: { id: 1 }};\nconst res = {\n  status: sinon.stub().returnsThis(),\n  json: sinon.stub().returnsThis()\n}\nawait deleteProduct(req, res);\nassert(res.status.calledWith(500));\nassert(res.json.calledWith({ message: \"Internal server error\" }));\nstub.restore();",
              "err": {},
              "uuid": "cccceecb-5c97-4b0f-ba22-ca88ec273bea",
              "parentUUID": "0c4e2acf-127e-4b41-ab4c-004d393ed060",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "75b716e5-5116-4de1-858d-bbbd838ea48c",
            "602fe0a8-7577-4a9a-84cd-cdfedc1ff13e",
            "cccceecb-5c97-4b0f-ba22-ca88ec273bea"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}