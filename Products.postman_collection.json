{
	"info": {
		"_postman_id": "f599c488-5a89-4e96-bd19-553375c4bedf",
		"name": "Products",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34088407"
	},
	"item": [
		{
			"name": "GET all products",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'http://localhost:3000/api/reset-database',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'application/json'\r",
							"    }\r",
							"}, function (err, res) {\r",
							"    console.log(res);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the Items array length\", () => {\r",
							"    pm.expect(pm.response.json().length > 0).to.equal(true)\r",
							"});\r",
							"\r",
							"pm.test(\"The value of name in the first element should be Hot Dog\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body[0].name).to.eql(\"Hot Dog\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "GET product by query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the Items array length\", () => {\r",
							"    pm.expect(pm.response.json().length > 0).to.equal(true)\r",
							"});\r",
							"\r",
							"pm.test(\"The value of name in the first element should be Hot Dog\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body[0].name).to.eql(\"Hot Dog\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products?name=Hot Dog",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					],
					"query": [
						{
							"key": "name",
							"value": "Hot Dog"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET product by substring",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the Items array length\", () => {\r",
							"    pm.expect(pm.response.json().length > 0).to.equal(true)\r",
							"});\r",
							"\r",
							"pm.test(\"The value of name in the first element should be Hot Dog\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body[0].name).to.eql(\"Hamburger\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products?name=bu",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					],
					"query": [
						{
							"key": "name",
							"value": "bu"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check the Items array length\", () => {\r",
							"    pm.expect(pm.response.json().length > 0).to.equal(true)\r",
							"})\r",
							"\r",
							"pm.test(\"The value of the name should be Hot Dog\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body[0].name).to.eql(\"Hot Dog\");\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"It should return a status of 201\", () => {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"It should return a created-message\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.message).to.eql(\"Product added successfully\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"pizza\",\r\n    \"description\": \"a meal\",\r\n    \"price\": 98,\r\n    \"quantity\": 32,\r\n    \"category\": \"food item\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "UPDATE product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"It should return a status of 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"It should return a update-message\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.message).to.eql(\"Changes saved\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"kebab pizza\",\r\n    \"description\": \"a meal\",\r\n    \"price\": 120,\r\n    \"quantity\": 32,\r\n    \"category\": \"food item\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/products/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"It should return a status of 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"It should return a deleted-message\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.message).to.eql(\"Product Deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"It should return a status of 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"It should return a deleted-message\", () => {\r",
							"    const body = pm.response.json();\r",
							"    pm.expect(body.message).to.eql(\"Products Deleted\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/products",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"products"
					]
				}
			},
			"response": []
		}
	]
}